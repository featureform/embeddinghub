name: End to End Testing
on: [pull_request]
concurrency:
  group: ${{ github.head_ref }}-e2e
  cancel-in-progress: true
jobs:
  api-server:
    name: Build API Server
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./api/Dockerfile
          tags: local/api-server:stable
          push: false
          outputs: type=docker,dest=/tmp/api-server.tar

      - name: Upload image
        uses: actions/upload-artifact@v3
        with:
          name: api-server
          path: /tmp/api-server.tar

  coordinator:
    name: Build Coordinator
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./coordinator/Dockerfile
          tags: local/coordinator:stable
          push: false
          outputs: type=docker,dest=/tmp/coordinator.tar
      - name: Upload image
        uses: actions/upload-artifact@v3
        with:
          name: coordinator
          path: /tmp/coordinator.tar

  dashboard:
    name: Build Dashboard
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./dashboard/Dockerfile
          tags: local/dashboard:stable
          push: false
          outputs: type=docker,dest=/tmp/dashboard.tar
      - name: Upload image
        uses: actions/upload-artifact@v3
        with:
          name: dashboard
          path: /tmp/dashboard.tar

  metadata:
    name: Build Metadata
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./metadata/Dockerfile
          tags: local/metadata:stable
          push: false
          outputs: type=docker,dest=/tmp/metadata.tar
      - name: Upload image
        uses: actions/upload-artifact@v3
        with:
          name: metadata
          path: /tmp/metadata.tar

  dashboard-metadata:
    name: Build Dashboard Metadata
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./metadata/dashboard/Dockerfile
          tags: local/metadata-dashboard:stable
          push: false
          outputs: type=docker,dest=/tmp/metadata-dashboard.tar

      - name: Upload image
        uses: actions/upload-artifact@v3
        with:
          name: metadata-dashboard
          path: /tmp/metadata-dashboard.tar

  serving:
    name: Build Serving
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./serving/Dockerfile
          tags: local/serving:stable
          push: false
          outputs: type=docker,dest=/tmp/serving.tar

      - name: Upload image
        uses: actions/upload-artifact@v3
        with:
          name: serving
          path: /tmp/serving.tar

  worker:
    name: Build Worker
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./runner/Dockerfile
          tags: local/worker:stable
          push: false
          outputs: type=docker,dest=/tmp/worker.tar
      - name: Upload image
        uses: actions/upload-artifact@v3
        with:
          name: worker
          path: /tmp/worker.tar
  test:
    name: Run Tests
    environment: Integration testing
    needs: [api-server, coordinator, dashboard, dashboard-metadata, metadata, serving, worker]
    defaults:
      run:
        working-directory: ./
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          names: api-server coordinator dashboard dashboard-metadata metadata serving worker
          path: /tmp

      - uses: actions/setup-python@v4
        with:
          python-version: "3.7"
          check-latest: true


      - name: Check Artifacts
        run: |
          ls /tmp
          ls /tmp/api-server

      - name: Install grpc_tools
        run: pip install grpcio-tools requests python-dotenv

      - name: Install Protobuf
        run: sudo snap install protobuf --classic

      - name: Install etcdctl
        env:
          ETCD_VER: v3.4.19
          GOOGLE_URL: https://storage.googleapis.com/etcd
        run: |
          rm -f /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz
          rm -rf /tmp/etcd-download-test && mkdir -p /tmp/etcd-download-test
          
          curl -L ${GOOGLE_URL}/${ETCD_VER}/etcd-${ETCD_VER}-linux-amd64.tar.gz -o /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz
          tar xzvf /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz -C /tmp/etcd-download-test --strip-components=1
          rm -f /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz
          
          /tmp/etcd-download-test/etcd --version
          /tmp/etcd-download-test/etcdctl version

      - name: Install minikube and helm
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      - name: Configure Docker Socket
        run: |
          minikube start --kubernetes-version=v1.23.12
          eval $(minikube docker-env)

      - name: Load image
        run: |
          docker load --input /tmp/api-server/api-server.tar
          docker load --input /tmp/coordinator/coordinator.tar
          docker load --input /tmp/dashboard/dashboard.tar
          docker load --input /tmp/metadata-dashboard/metadata-dashboard.tar
          docker load --input /tmp/metadata/metadata.tar
          docker load --input /tmp/serving/serving.tar
          docker load --input /tmp/worker/worker.tar
          minikube image load local/api-server:stable
          minikube image load local/coordinator:stable
          minikube image load local/dashboard:stable
          minikube image load local/metadata-dashboard:stable
          minikube image load local/metadata:stable
          minikube image load local/serving:stable
          minikube image load local/worker:stable
          minikube image ls

      - name: Helm Install
        run: |
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
          helm install certmgr jetstack/cert-manager --set installCRDs=true --version v1.8.0 --namespace cert-manager --create-namespace
          helm install featureform ./charts/featureform --set global.repo=local --set global.pullPolicy=Never --set global.version=stable

      - name: Run CLI
        run: |
          kubectl get secret featureform-ca-secret -o=custom-columns=':.data.tls\.crt'| base64 -d > tls.crt
          export FEATUREFORM_HOST="localhost:443"
          export FEATUREFORM_CERT="tls.crt"

      - name: Test End-to-End
        env:
          AZURE_ACCOUNT_KEY: ${{ secrets.AZURE_ACCOUNT_KEY }}
          AZURE_ACCOUNT_NAME: ${{ secrets.AZURE_ACCOUNT_NAME }}
          AZURE_CONTAINER_NAME: ${{ secrets.AZURE_CONTAINER_NAME }}
        run: make test_e2e

      - name: Check That Dashboard Is Working
        id: link-report
        uses: celinekurpershoek/link-checker@master
        with:
          # Required:
          url: "http://localhost:7000"
          # optional:
          recursiveLinks: true
      - name: Print result
        run: echo "${{steps.link-report.outputs.result}}"

      - name: Reset Quickstart
        run: |
          helm uninstall quickstart
          helm install quickstart ./charts/quickstart
          /tmp/etcd-download-test/etcdctl --user=root:secretpassword del "" --prefix

      - name: Run CLI for Get and List Functions
        run: |
            kubectl get secret featureform-ca-secret -o=custom-columns=':.data.tls\.crt'| base64 -d > tls.crt
            featureform apply client/examples/quickstart.py --host localhost:8000 --cert tls.crt
            featureform get label fraudulent --host localhost:8000 --cert tls.crt
            featureform get label fraudulent quickstart --host localhost:8000 --cert tls.crt
            featureform list labels --host localhost:8000 --cert tls.crt
            featureform get source transactions --host localhost:8000 --cert tls.crt
            featureform get source transactions kaggle --host localhost:8000 --cert tls.crt
            featureform list sources --host localhost:8000 --cert tls.crt
            featureform get feature avg_transactions --host localhost:8000 --cert tls.crt
            featureform get feature avg_transactions quickstart --host localhost:8000 --cert tls.crt
            featureform list features --host localhost:8000 --cert tls.crt
            featureform get provider redis-quickstart --host localhost:8000 --cert tls.crt
            featureform list providers --host localhost:8000 --cert tls.crt
            featureform get user featureformer --host localhost:8000 --cert tls.crt
            featureform list users --host localhost:8000 --cert tls.crt
            featureform get entity user --host localhost:8000 --cert tls.crt
            featureform list entities --host localhost:8000 --cert tls.crt
#
#      - name: Set Cert as Env Variable
#        run: export FEATUREFORM_CERT=$(pwd)/tls.crt
#
#      - name: Run Get Test
#        run: pytest client/src/featureform/get_test.pya
#
#      - name: Run List Test
#        run: pytest client/src/featureform/list_test.py

      - name: K8s Pods
        if: always()
        run: kubectl get pods

      - name: API Server Logs
        if: always()
        run: kubectl logs -l app=featureform-api-server

      - name: Coordinator Logs
        if: always()
        run: kubectl logs -l app=featureform-coordinator

      - name: Dashboard Logs
        if: always()
        run: kubectl logs -l app=featureform-dashboard

      - name: Dashboard Metadata Logs
        if: always()
        run: kubectl logs -l app=featureform-dashboard-metadata

      - name: ETCD Logs
        if: always()
        run: kubectl logs -l app.kubernetes.io/name=etcd

      - name: Feature Server Logs
        if: always()
        run: kubectl logs -l app=featureform-feature-server

      - name: Ingress Logs
        if: always()
        run: kubectl logs -l app.kubernetes.io/name=ingress-nginx

      - name: Metadata Server Logs
        if: always()
        run: kubectl logs -l app=featureform-metadata-server

      - name: Quickstart Loader Logs
        if: always()
        continue-on-error: true
        run: kubectl logs -l job-name=featureform-quickstart-loader

      - name: Cleanup Featureform
        if: always()
        continue-on-error: true
        run: helm uninstall featureform

      - name: Cleanup Cert Manager
        if: always()
        continue-on-error: true
        run: helm uninstall certmgr --namespace cert-manager

      - name: Cleanup Quickstart
        if: always()
        continue-on-error: true
        run: helm uninstall quickstart

      - name: Cleanup Docker
        if: always()
        continue-on-error: true
        run: | 
          docker system prune -a
          docker rmi $(docker images -a -q)

      - name: Cleanup PVC
        if: always()
        continue-on-error: true
        run: |
          kubectl delete pvc data-featureform-etcd-0
          kubectl delete pvc data-featureform-etcd-1
          kubectl delete pvc data-featureform-etcd-2

      - name: Cleanup Minikube
        if: always()
        continue-on-error: true
        run: minikube delete