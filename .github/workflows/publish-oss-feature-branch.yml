name: Publish Feature Branch
on:
  workflow_dispatch:
    inputs:
      version-postfix:
        description: "Postfix for the default version: 0.0.0-rc. As an example: 0.0.0-rc99"
        required: true
        type: string
      type:
        description: "If this version is a release or pre-release"
        required: true
        default: "pre-release"
        type: choice
        options: # enforce 1 option for now
          - pre-release
env:
  PRERELEASE_TAG: 0.0.0-rc
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
  AWS_DEFAULT_REGION: "us-east-1"

jobs:
  api-server:
    name: Build API Server
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set production tag
        run: echo "TAG=0.0.0-rc${{ inputs.version-postfix }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./api/Dockerfile
          tags: featureformcom/api-server:${{ env.TAG }}
          push: true

  backup:
    name: Build Backup Image
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set production tag
        run: echo "TAG=0.0.0-rc${{ inputs.version-postfix }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export pre-release
        if: ${{ inputs.type == 'pre-release' }}
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./backup/Dockerfile
          tags: featureformcom/backup:${{ env.TAG }}
          push: true

      - name: Build and export release
        if: ${{ inputs.type == 'release' }}
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./backup/Dockerfile
          tags: featureformcom/backup:${{ env.TAG }},featureformcom/backup:latest
          push: true

  coordinator:
    name: Build Coordinator
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set production tag
        run: echo "TAG=0.0.0-rc${{ inputs.version-postfix }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./coordinator/Dockerfile
          tags: featureformcom/coordinator:${{ env.TAG }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  dashboard:
    name: Build Dashboard
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set production tag
        run: echo "TAG=0.0.0-rc${{ inputs.version-postfix }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./dashboard/Dockerfile
          tags: featureformcom/dashboard:${{ env.TAG }}
          push: true

  metadata:
    name: Build Metadata
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set production tag
        run: echo "TAG=0.0.0-rc${{ inputs.version-postfix }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./metadata/Dockerfile
          tags: featureformcom/metadata:${{ env.TAG }}
          push: true

  dashboard-metadata:
    name: Build Dashboard Metadata
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set production tag
        run: echo "TAG=0.0.0-rc${{ inputs.version-postfix }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./metadata/dashboard/Dockerfile
          tags: featureformcom/metadata-dashboard:${{ env.TAG }}
          push: true

  serving:
    name: Build Serving
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set production tag
        run: echo "TAG=0.0.0-rc${{ inputs.version-postfix }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./serving/Dockerfile
          tags: featureformcom/serving:${{ env.TAG }}
          push: true

  worker:
    name: Build Worker
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set production tag
        run: echo "TAG=0.0.0-rc${{ inputs.version-postfix }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./runner/Dockerfile
          tags: featureformcom/worker:${{ env.TAG }}
          push: true

  k8s_runner:
    name: Build k8s Runner
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set production tag
        run: echo "TAG=0.0.0-rc${{ inputs.version-postfix }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./provider/scripts/k8s/Dockerfile
          tags: featureformcom/k8s_runner:${{ env.TAG }}
          push: true

  helm_install:
    name: Helm Install
    runs-on: "ubuntu-latest"
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    needs:
      [
        "api-server",
        "backup",
        "coordinator",
        "dashboard",
        "metadata",
        "dashboard-metadata",
        "serving",
        "worker",
        "k8s_runner",
      ]
    steps:
      - uses: actions/checkout@v3
      - name: Install helm chart
        uses: WyriHaximus/github-action-helm3@v3
        with:
          exec: helm install featureform ./charts/featureform --namespace rc${{ inputs.version-postfix }} --create-namespace --set global.hostname=rc${{ inputs.version-postfix }}.pr.featureform.com --set global.version=0.0.0-rc${{ inputs.version-postfix }} --set nginx.enabled=false --set global.localCert=false --set global.publicCert=true
          kubeconfig: "${{ secrets.KUBECONFIG }}"
          overrule_existing_kubeconfig: "true"
