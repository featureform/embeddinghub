name: Testing
on: [push]

env:
  TYPESENSE_PORT: 8108
  TYPESENSE_API_KEY: "xyz"
  REDIS_PORT: 6379
  CASSANDRA_USER: "cassandra"
  CASSANDRA_PASSWORD: "CASSANDRA"
  POSTGRES_USER: "username"
  POSTGRES_DB: "default"
  POSTGRES_PASSWORD: "password"
  ETCD_HOST: "localhost"
  ETCD_PORT: 2379
  REDSHIFT_PORT: 5439
  REDSHIFT_DATABASE: dev

jobs:
  setup:
    name: Setup Test Dependencies
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Check directory
        run: |
          ls -la

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Install grpc_tools
        run: pip install grpcio-tools build

      - name: Install Protobuf
        run: sudo snap install protobuf --classic

      - name: Setup Proto
        run: ./gen_grpc.sh

      - name: Build
        run: go build ./metadata/*.go

      - name: Build Python Package
        run: ./pip_update.sh

      - uses: actions/upload-artifact@v3
        with:
          name: compiled-workdir
          path: ./
          retention-days: 1

  typesense:
    name: Typesense Testing
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Download Working Compiled Directories
        uses: actions/download-artifact@v3
        with:
          name: compiled-workdir

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      # Installing Typesense manually b/c the base container uses input arguments that
      # Github Actions currently doesn't support (e.g. --data-dir, --api-key, --enable-cores).
      # Can create a custom Typesense container in the future if desired
      - name: Install Typesense Container
        run: docker pull typesense/typesense:0.22.2

      - name: Start Typesense
        run: |
          mkdir /tmp/typesense-data
          docker run -d -p $TYPESENSE_PORT:8108 -v/tmp/typesense-data:/data typesense/typesense:0.22.2 \
          --data-dir /data --api-key=$TYPESENSE_API_KEY --enable-cors

      - name: Make Coverage Directory
        working-directory: ./
        run: mkdir ./coverage

      - name: Testing
        working-directory: ./
        run: go test -v -coverpkg=./... -coverprofile ./coverage/cover.out.tmp ./metadata/search/...

      - name: Convert Coverage Test Results
        if: always()
        working-directory: ./coverage
        run: |
          cat cover.out.tmp | grep -v "proto" | grep -v "main"  > cover.out
          go tool cover -html=cover.out -o cover.html

      - uses: codecov/codecov-action@v2
        if: always()
        with:
          files: ./coverage/cover.out
          name: typesense-coverage
          verbose: true

      - name: Archive code coverage results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: typesense-coverage-reports
          path: ./coverage

  provider-online:
    name: Online Provider Testing
    environment: Integration testing
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 15
    services:
      redis:
        image: redis
        # Hard coded port because environment variables not currently
        # supported for use outside of 'steps'
        ports:
          - 6379:6379

      cassandra:
        image: cassandra
        # Hard coded port because environment variables not currently
        # supported for use outside of 'steps'
        ports:
          - 9042:9042

    steps:
      - name: Download Working Compiled Directories
        uses: actions/download-artifact@v3
        with:
          name: compiled-workdir

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Make Coverage Directory
        working-directory: ./
        run: mkdir coverage

      - name: create-json
        id: create-json
        uses: jsdaniell/create-json@1.1.2
        with:
          name: "./provider/firestore_credentials.json"
          json: ${{ secrets.FIRESTORE_CREDENTIALS_FILE }}

      - name: Testing
        env:
          DYNAMO_ACCESS_KEY: ${{ secrets.DYNAMO_ACCESS_KEY }}
          DYNAMO_SECRET_KEY: ${{ secrets.DYNAMO_SECRET_KEY }}
          FIRESTORE_CRED: "firestore_credentials.json"
          FIRESTORE_PROJECT: ${{ secrets.FIRESTORE_PROJECT }}
        working-directory: ./
        run: go test -v -coverpkg=./... -coverprofile coverage/cover.out.tmp ./provider/... -tags=online,provider

      - name: Convert Coverage Test Results
        if: always()
        working-directory: ./coverage
        run: |
          cat cover.out.tmp | grep -v "proto" | grep -v "main"  > cover.out
          go tool cover -html=cover.out -o cover.html

      - uses: codecov/codecov-action@v2
        if: always()
        with:
          root_dir: ./
          files: ./coverage/cover.out
          name: provider-online-coverage
          verbose: true

      - name: Archive code coverage results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: provider-online-coverage-reports
          path: ./coverage

  provider-offline:
    name: Offline Provider Testing
    environment: Integration testing
    needs: setup
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}

    steps:
      - name: Download Working Compiled Directories
        uses: actions/download-artifact@v3
        with:
          name: compiled-workdir

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Make Coverage Directory
        working-directory: ./
        run: mkdir coverage

      - name: Testing
        env:
          SNOWFLAKE_USERNAME: ${{ secrets.SNOWFLAKE_USERNAME }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ORG: ${{ secrets.SNOWFLAKE_ORG }}
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          REDSHIFT_USERNAME: ${{ secrets.REDSHIFT_USERNAME }}
          REDSHIFT_PASSWORD: ${{ secrets.REDSHIFT_PASSWORD }}
          REDSHIFT_ENDPOINT: ${{ secrets.REDSHIFT_ENDPOINT }}
        working-directory: ./
        run: go test -v -coverpkg=./... -coverprofile coverage/cover.out.tmp ./provider/... -tags=offline

      - name: Convert Coverage Test Results
        if: always()
        working-directory: ./coverage
        run: |
          cat cover.out.tmp | grep -v "proto" | grep -v "main"  > cover.out
          go tool cover -html=cover.out -o cover.html

      - uses: codecov/codecov-action@v2
        if: always()
        with:
          root_dir: ./
          files: ./coverage/cover.out
          name: provider-offline-coverage
          verbose: true

      - name: Archive code coverage results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: provider-offline-coverage-reports
          path: ./coverage

  metadata:
    name: Metadata Testing (Excluding Typesense)
    needs: setup
    runs-on: ubuntu-latest

    steps:
      - name: Download Working Compiled Directories
        uses: actions/download-artifact@v3
        with:
          name: compiled-workdir

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      # Should be switched to a container, but the available etcd containers
      # haven't been running easily locally yet. Will create a custom one
      # in the future
      - name: Install ETCD
        run: |
          git clone -b v3.4.16 https://github.com/etcd-io/etcd.git
          cd etcd
          ./build
          export PATH="$PATH:`pwd`/bin"
          etcd --version
          etcd --logger=zap &

      - name: Make Coverage Directory
        working-directory: ./
        run: mkdir coverage

      - name: Testing
        env:
          ETCD_HOST: ${{ env.ETCD_HOST }}
          ETCD_PORT: ${{ env.ETCD_PORT }}
        working-directory: ./
        run: go test -v -coverpkg=./... -coverprofile coverage/cover.out.tmp ./metadata/

      - name: Convert Coverage Test Results
        if: always()
        working-directory: ./coverage
        run: |
          cat cover.out.tmp | grep -v "proto" | grep -v "main"  > cover.out
          go tool cover -html=cover.out -o cover.html

      - uses: codecov/codecov-action@v2
        if: always()
        with:
          root_dir: ./
          files: ./coverage/cover.out
          name: metadata-coverage
          verbose: true

  metrics:
    name: Metrics Testing
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Download Working Compiled Directories
        uses: actions/download-artifact@v3
        with:
          name: compiled-workdir

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Make Coverage Directory
        working-directory: ./
        run: mkdir coverage

      - name: Testing
        working-directory: ./
        run: go test -v -coverpkg=./... -coverprofile coverage/cover.out.tmp ./metrics/...

      - name: Convert Coverage Test Results
        if: always()
        working-directory: ./coverage
        run: |
          cat cover.out.tmp | grep -v "proto" | grep -v "main"  > cover.out
          go tool cover -html=cover.out -o cover.html

      - uses: codecov/codecov-action@v2
        if: always()
        with:
          root_dir: ./
          files: ./coverage/cover.out
          name: metrics-coverage
          verbose: true

      - name: Archive code coverage results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: metrics-coverage-reports
          path: ./coverage

  runner:
    name: Runner Testing
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Download Working Compiled Directories
        uses: actions/download-artifact@v3
        with:
          name: compiled-workdir

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Install ETCD
        run: |
          git clone -b v3.4.16 https://github.com/etcd-io/etcd.git
          cd etcd
          ./build
          export PATH="$PATH:`pwd`/bin"
          etcd --version
          etcd --logger=zap &

      - name: Make Coverage Directory
        working-directory: ./
        run: mkdir coverage

      - name: Testing
        working-directory: ./
        run: go test -v -coverpkg=./... -coverprofile coverage/cover.out.tmp ./runner/...

      - name: Convert Coverage Test Results
        if: always()
        working-directory: ./coverage
        run: |
          cat cover.out.tmp | grep -v "proto" | grep -v "main"  > cover.out
          go tool cover -html=cover.out -o cover.html

      - uses: codecov/codecov-action@v2
        if: always()
        with:
          root_dir: ./
          files: ./coverage/cover.out
          name: runner-coverage
          verbose: true

      - name: Archive code coverage results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: runner-coverage-reports
          path: ./coverage

  serving:
    name: Serving Testing
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Download Working Compiled Directories
        uses: actions/download-artifact@v3
        with:
          name: compiled-workdir

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Make Coverage Directory
        working-directory: ./
        run: mkdir coverage

      - name: Testing
        working-directory: ./
        run: go test -v -coverpkg=./... -coverprofile coverage/cover.out.tmp ./newserving/...

      - name: Convert Coverage Test Results
        if: always()
        working-directory: ./coverage
        run: |
          cat cover.out.tmp | grep -v "proto" | grep -v "main" > cover.out
          go tool cover -html=cover.out -o cover.html

      - uses: codecov/codecov-action@v2
        if: always()
        with:
          root_dir: ./
          files: ./coverage/cover.out
          name: newserving-coverage
          verbose: true

      - name: Archive code coverage results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: serving-coverage-reports
          path: ./coverage
  coordinator:
    name: Coordinator Testing
    environment: Integration testing
    needs: setup
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        # Hard coded port because environment variables not currently
        # supported for use outside of 'steps'
        ports:
          - 6379:6379

      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
    steps:
      - name: Download Working Compiled Directories
        uses: actions/download-artifact@v3
        with:
          name: compiled-workdir

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      # Already installed in metadata tests, how to preserve it so we don't repeat?
      - name: Install ETCD
        run: |
          git clone -b v3.4.16 https://github.com/etcd-io/etcd.git
          cd etcd
          ./build
          export PATH="$PATH:`pwd`/bin"
          etcd --version
          etcd --logger=zap &

      - name: Make Coverage Directory
        working-directory: ./
        run: mkdir coverage

      - name: Testing
        env:
          SNOWFLAKE_USERNAME: ${{ secrets.SNOWFLAKE_USERNAME }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ORG: ${{ secrets.SNOWFLAKE_ORG }}
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          ETCD_HOST: ${{ env.ETCD_HOST }}
          ETCD_PORT: ${{ env.ETCD_PORT }}
        working-directory: ./
        run: go test -v -coverpkg=./... -coverprofile coverage/cover.out.tmp ./coordinator/...

      - name: Convert Coverage Test Results
        if: always()
        working-directory: ./coverage
        run: |
          cat cover.out.tmp | grep -v "proto" | grep -v "main"  > cover.out
          go tool cover -html=cover.out -o cover.html

      - uses: codecov/codecov-action@v2
        if: always()
        with:
          root_dir: ./
          files: ./coverage/cover.out
          name: coordinator-coverage
          verbose: true

      - name: Archive code coverage results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coordinator-coverage-reports
          path: ./coverage

  api:
    name: API Testing
    needs: setup
    runs-on: ubuntu-latest
    env:
      API_PORT: 7878
      METADATA_HOST: "featureform-metadata-server"
      METADATA_PORT: 8080
      SERVING_HOST: "featureform-feature-server"
      SERVING_PORT: 8080

    steps:
      - name: Download Working Compiled Directories
        uses: actions/download-artifact@v3
        with:
          name: compiled-workdir

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Make Coverage Directory
        working-directory: ./
        run: mkdir coverage

      - name: Build API.go
        working-directory: ./api
        run: go build

      - name: Start API Server
        working-directory: ./api
        env:
          API_PORT: 7878
          METADATA_HOST: "featureform-metadata-server"
          METADATA_PORT: 8080
          SERVING_HOST:  "featureform-feature-server"
          SERVING_PORT: 8080
        run: go run main.go &

      - name: Install python dependencies
        working-directory: ./
        run: |
          python3 -m pip install build pytest
          python3 -m build ./client/
          python3 -m pip install client/dist/*

      - name: Testing
        env:
          API_ADDRESS: "localhost:7878"
        working-directory: ./client/tests/
        run: pytest connection_test.py
  schedule:
    runs-on: ubuntu-latest
    name: Schedule Jobs
    environment: Integration testing
    needs: setup
    steps:
      - uses: actions/checkout@v2
      - name: Install grpc_tools
        run: pip install grpcio-tools

      - name: Install Protobuf
        run: sudo snap install protobuf --classic

      - name: Setup Proto
        run: ./gen_grpc.sh
      - name: Start minikube
        uses: medyagh/setup-minikube@master
      - name: build docker images and add to minikube
        run: |
          eval $(minikube docker-env)
          docker build . --file runner/Dockerfile --tag local/worker:stable
          docker build . --file coordinator/scheduletest/Dockerfile --tag local/scheduletester:stable
          docker build . --file metadata/Dockerfile --tag local/metadata:stable
          minikube image ls
      - name: Set up Helm
        run: |
          echo -n "verifying images:"
          docker images
          helm repo add jetstack https://charts.jetstack.io
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update
          helm install certmgr jetstack/cert-manager --set installCRDs=true --version v1.8.0 --namespace cert-manager --create-namespace
          helm install featureform ./charts/featureform --set global.repo=local --set global.pullPolicy=Never --set global.version=stable
          helm install test-quickstart ./charts/quickstart
          kubectl wait pods --for condition=ready --timeout=300s -l app.kubernetes.io/name=etcd
          kubectl wait deployments --for condition=Available=True --timeout=300s -l run=featureform-metadata-server   
          kubectl wait pods --for condition=ready --timeout=300s -l app.kubernetes.io/instance=test-quickstart
      - name: Deploy schedule tester job
        run: kubectl apply -f coordinator/scheduletest/runjob.yaml
      - name: Get pods in the cluster
        run: kubectl get pods -A
      - name: Get deployments in cluster
        run: kubectl get deployments -A
      - name: Get services in the cluster
        run: kubectl get services -A
      - name: Wait until test pod is completed
        run: kubectl wait job example --for condition=complete --timeout=300s
      - name: List cron jobs
        run: kubectl get cronjobs -A
      - name: List pods
        run: kubectl get pods -l app=example
      - name: Get services in the cluster
        run: kubectl get services -A
      - name: Get job pods and print logs
        run: kubectl logs -l job-name=example

  localmode:
    name: Test Localmode
    needs: setup
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ] #osx-arm64 currently not working. Ticket made with github
        python-version: [ '3.7', '3.8', '3.9', '3.10' ]
    steps:
      - name: Download Working Compiled Directories
        uses: actions/download-artifact@v3
        with:
          name: compiled-workdir

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install pytest
        run: pip install pytest

      - name: Install featureform
        run: pip install client/dist/featureform-0.0.0-py3-none-any.whl

      - name: Download Test Data
        run: curl https://featureform-demo-files.s3.amazonaws.com/transactions.csv -o transactions.csv

      - name: Featureform Apply
        run: python -m featureform apply client/examples/local_quickstart.py --local

      - name: Run Quickstart Test
        run: pytest client/tests/localmode.py

      - name: Run Register Tests
        run: python client/tests/local_test.py

      - name: Clear SQLite
        run: rm -r .featureform

      - name: Run Unit Tests
        run: pytest client/tests/serving_test.py -s

      - name: Clear SQLite
        continue-on-error: true
        run: rm -r .featureform

      - name: Run Client Tests
        run: pytest client/tests/local_test.py -s
        