name: Testing
on: [push, pull_request]

env:
  TYPESENSE_PORT: 8108
  TYPESENSE_API_KEY: "xyz"
  REDIS_PORT: 6379
  POSTGRES_USER: "username"
  POSTGRES_DB: "default"
  POSTGRES_PASSWORD: "password"
  ETCD_HOST: "localhost"
  ETCD_PORT: 2379

jobs:
  setup:
    name: Setup Test Dependencies
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Check directory
        run: |
          ls -la

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Install grpc_tools
        run: pip install grpcio-tools

      - name: Install Protobuf
        run: sudo snap install protobuf --classic

      - name: Setup Proto
        run: ./gen_grpc.sh

      - name: Build
        run: go build ./metadata/*.go

      - uses: actions/upload-artifact@v3
        with:
          name: compiled-workdir
          path: ./
          retention-days: 1

  typesense:
    name: Typesense Testing
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Download Working Compiled Directories
        uses: actions/download-artifact@v3
        with:
          name: compiled-workdir

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      # Installing Typesense manually b/c the base container uses input arguments that
      # Github Actions currently doesn't support (e.g. --data-dir, --api-key, --enable-cores).
      # Can create a custom Typesense container in the future if desired
      - name: Install Typesense Container
        run: docker pull typesense/typesense:0.22.2

      - name: Start Typesense
        run: |
          mkdir /tmp/typesense-data
          docker run -d -p $TYPESENSE_PORT:8108 -v/tmp/typesense-data:/data typesense/typesense:0.22.2 \
          --data-dir /data --api-key=$TYPESENSE_API_KEY --enable-cors

      - name: Make Coverage Directory
        working-directory: ./
        run: mkdir ./coverage

      - name: Testing
        working-directory: ./
        run: go test -v -coverpkg=./... -coverprofile ./coverage/cover.out.tmp ./metadata/search/...

      - name: Convert Coverage Test Results
        if: always()
        working-directory: ./coverage
        run: |
          cat cover.out.tmp | grep -v "proto" | grep -v "main"  > cover.out
          go tool cover -html=cover.out -o cover.html

      - uses: codecov/codecov-action@v2
        if: always()
        with:
          files: ./coverage/cover.out
          name: typesense-coverage
          verbose: true

      - name: Archive code coverage results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: typesense-coverage-reports
          path: ./coverage

  provider:
    name: Provider Testing
    environment: Integration testing
    needs: setup
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        # Hard coded port because environment variables not currently
        # supported for use outside of 'steps'
        ports:
          - 6379:6379

      cassandra:
        image: cassandra
        # Hard coded port because environment variables not currently
        # supported for use outside of 'steps'
        ports:
          - 9042:9042

      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}

    steps:
      - name: Download Working Compiled Directories
        uses: actions/download-artifact@v3
        with:
          name: compiled-workdir

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Make Coverage Directory
        working-directory: ./
        run: mkdir coverage

      - name: Save Creds To File
        run: |
          echo ${{ secrets.FIRESTORE_CREDENTIALS_FILE }} >> firestore_credentials.json
          cat firestore_credentials.json

      - name: Testing
        env:
          SNOWFLAKE_USERNAME: ${{ secrets.SNOWFLAKE_USERNAME }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ORG: ${{ secrets.SNOWFLAKE_ORG }}
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          FIRESTORE_CRED: firestore_credentials.json
          FIRESTORE_PROJECT: ${{ secrets.FIRESTORE_PROJECT }}
        working-directory: ./
        run: go test -v -coverpkg=./... -coverprofile coverage/cover.out.tmp ./provider/...

      - name: Convert Coverage Test Results
        if: always()
        working-directory: ./coverage
        run: |
          cat cover.out.tmp | grep -v "proto" | grep -v "main"  > cover.out
          go tool cover -html=cover.out -o cover.html

      - uses: codecov/codecov-action@v2
        if: always()
        with:
          root_dir: ./
          files: ./coverage/cover.out
          name: provider-coverage
          verbose: true

      - name: Archive code coverage results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: provider-coverage-reports
          path: ./coverage

  metadata:
    name: Metadata Testing (Excluding Typesense)
    needs: setup
    runs-on: ubuntu-latest

    steps:
      - name: Download Working Compiled Directories
        uses: actions/download-artifact@v3
        with:
          name: compiled-workdir

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      # Should be switched to a container, but the available etcd containers
      # haven't been running easily locally yet. Will create a custom one
      # in the future
      - name: Install ETCD
        run: |
          git clone -b v3.4.16 https://github.com/etcd-io/etcd.git
          cd etcd
          ./build
          export PATH="$PATH:`pwd`/bin"
          etcd --version
          etcd --logger=zap &

      - name: Make Coverage Directory
        working-directory: ./
        run: mkdir coverage

      - name: Testing
        env:
          ETCD_HOST: ${{ env.ETCD_HOST }}
          ETCD_PORT: ${{ env.ETCD_PORT }}
        working-directory: ./
        run: go test -v -coverpkg=./... -coverprofile coverage/cover.out.tmp ./metadata/

      - name: Convert Coverage Test Results
        if: always()
        working-directory: ./coverage
        run: |
          cat cover.out.tmp | grep -v "proto" | grep -v "main"  > cover.out
          go tool cover -html=cover.out -o cover.html

      - uses: codecov/codecov-action@v2
        if: always()
        with:
          root_dir: ./
          files: ./coverage/cover.out
          name: metadata-coverage
          verbose: true

  metrics:
    name: Metrics Testing
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Download Working Compiled Directories
        uses: actions/download-artifact@v3
        with:
          name: compiled-workdir

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Make Coverage Directory
        working-directory: ./
        run: mkdir coverage

      - name: Testing
        working-directory: ./
        run: go test -v -coverpkg=./... -coverprofile coverage/cover.out.tmp ./metrics/...

      - name: Convert Coverage Test Results
        if: always()
        working-directory: ./coverage
        run: |
          cat cover.out.tmp | grep -v "proto" | grep -v "main"  > cover.out
          go tool cover -html=cover.out -o cover.html

      - uses: codecov/codecov-action@v2
        if: always()
        with:
          root_dir: ./
          files: ./coverage/cover.out
          name: metrics-coverage
          verbose: true

      - name: Archive code coverage results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: metrics-coverage-reports
          path: ./coverage

  runner:
    name: Runner Testing
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Download Working Compiled Directories
        uses: actions/download-artifact@v3
        with:
          name: compiled-workdir

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Install ETCD
        run: |
          git clone -b v3.4.16 https://github.com/etcd-io/etcd.git
          cd etcd
          ./build
          export PATH="$PATH:`pwd`/bin"
          etcd --version
          etcd --logger=zap &

      - name: Make Coverage Directory
        working-directory: ./
        run: mkdir coverage

      - name: Testing
        working-directory: ./
        run: go test -v -coverpkg=./... -coverprofile coverage/cover.out.tmp ./runner/...

      - name: Convert Coverage Test Results
        if: always()
        working-directory: ./coverage
        run: |
          cat cover.out.tmp | grep -v "proto" | grep -v "main"  > cover.out
          go tool cover -html=cover.out -o cover.html

      - uses: codecov/codecov-action@v2
        if: always()
        with:
          root_dir: ./
          files: ./coverage/cover.out
          name: runner-coverage
          verbose: true

      - name: Archive code coverage results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: runner-coverage-reports
          path: ./coverage

  serving:
    name: Serving Testing
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Download Working Compiled Directories
        uses: actions/download-artifact@v3
        with:
          name: compiled-workdir

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Make Coverage Directory
        working-directory: ./
        run: mkdir coverage

      - name: Testing
        working-directory: ./
        run: go test -v -coverpkg=./... -coverprofile coverage/cover.out.tmp ./newserving/...

      - name: Convert Coverage Test Results
        if: always()
        working-directory: ./coverage
        run: |
          cat cover.out.tmp | grep -v "proto" | grep -v "main" > cover.out
          go tool cover -html=cover.out -o cover.html

      - uses: codecov/codecov-action@v2
        if: always()
        with:
          root_dir: ./
          files: ./coverage/cover.out
          name: newserving-coverage
          verbose: true

      - name: Archive code coverage results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: serving-coverage-reports
          path: ./coverage
  coordinator:
    name: Coordinator Testing
    environment: Integration testing
    needs: setup
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        # Hard coded port because environment variables not currently
        # supported for use outside of 'steps'
        ports:
          - 6379:6379

      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
    steps:
      - name: Download Working Compiled Directories
        uses: actions/download-artifact@v3
        with:
          name: compiled-workdir

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      # Already installed in metadata tests, how to preserve it so we don't repeat?
      - name: Install ETCD
        run: |
          git clone -b v3.4.16 https://github.com/etcd-io/etcd.git
          cd etcd
          ./build
          export PATH="$PATH:`pwd`/bin"
          etcd --version
          etcd --logger=zap &

      - name: Make Coverage Directory
        working-directory: ./
        run: mkdir coverage

      - name: Testing
        env:
          SNOWFLAKE_USERNAME: ${{ secrets.SNOWFLAKE_USERNAME }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ORG: ${{ secrets.SNOWFLAKE_ORG }}
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          ETCD_HOST: ${{ env.ETCD_HOST }}
          ETCD_PORT: ${{ env.ETCD_PORT }}
        working-directory: ./
        run: go test -v -coverpkg=./... -coverprofile coverage/cover.out.tmp ./coordinator/...

      - name: Convert Coverage Test Results
        if: always()
        working-directory: ./coverage
        run: |
          cat cover.out.tmp | grep -v "proto" | grep -v "main"  > cover.out
          go tool cover -html=cover.out -o cover.html

      - uses: codecov/codecov-action@v2
        if: always()
        with:
          root_dir: ./
          files: ./coverage/cover.out
          name: coordinator-coverage
          verbose: true

      - name: Archive code coverage results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coordinator-coverage-reports
          path: ./coverage

  api:
    name: API Testing
    needs: setup
    runs-on: ubuntu-latest
    env:
      API_PORT: 7878
      METADATA_HOST: "featureform-metadata-server"
      METADATA_PORT: 8080
      SERVING_HOST: "featureform-feature-server"
      SERVING_PORT: 8080

    steps:
       - name: Download Working Compiled Directories
         uses: actions/download-artifact@v3
         with:
           name: compiled-workdir

       - name: Set up Go
         uses: actions/setup-go@v2
         with:
           go-version: 1.17

       - name: Make Coverage Directory
         working-directory: ./
         run: mkdir coverage

       - name: Build API.go
         working-directory: ./api
         run: go build

       - name: Start API Server
         working-directory: ./api
         run: go run api.go &

       - name: Install python dependencies
         working-directory: ./
         run: |
           python3 -m pip install build pytest
           python3 -m build ./client/
           python3 -m pip install client/dist/*

       - name: Testing
         env:
           API_ADDRESS: "localhost:7878"
         working-directory: ./client/tests
         run: pytest
