# This Source Code Form is subject to the terms of the Mozilla Public
# License, v.2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

""" Embedding store module.
"""

import grpc
from client import embedding_store_pb2_grpc
from client import embedding_store_pb2


class EmbeddingStoreClient:


    def __init__(self, host="localhost", port=50051):
        """Creates client (new instance of the embedding store class) and establishes a connection.

        Args:
            self: A reference to the current instance of the class.
            host: The desired hostname
            port: The specified port number, set to 50051

        """
        connection_str = "%.%".format(host, port)
        self._channel = grpc.insecure_channel('localhost:50051')
        self._stub = embedding_store_pb2_grpc.EmbeddingStoreStub(self._channel)


    def close(self):
        """Closes the connection.

        Args: 
            self: A reference to the current instance of the class.

        """
        return self._channel.close()


    def set(self, key, embedding):
        """Creates embedding record for storage.

        Creates a new embedding record that is stored with a Faiss generated index as the key.
        The vector representation is stored as a dict.
        example: {'key': []}

        Args:
            self: A reference to the current instance of the class. 
            key: The index for retrieval. Indices are strings generated by Faiss.
            embedding: The embedding vector to be stored. 

        """
        req = embedding_store_pb2.SetRequest()
        req.key = key
        req.embedding.values[:] = embedding
        self._stub.Set(req)

    def get(self, key):
        """Retrieves an embedding record from the storage layer.
    
        Args: 
            self: A reference to the current instance of the class.
            key: The embedding index for retrieval.

        Returns:
            A dict of the embedding vector representation for the corressponding index.  

        """
        resp = self._stub.Get(embedding_store_pb2.GetRequest(key=key))
        return resp.embedding.values


    def multiset(self, embedding_dict):
        """Creates mutliple embedding records at once.

        Receives a list of embeddings, iterates over each element and generates a record with a Faiss index.
        example: {'key': []}

        Args: 
            self: A reference to the current instance of the class.
            embedding_dict: A list of embeddings.

        """
        it = self._embedding_dict_iter(embedding_dict)
        self._stub.MultiSet(it)

    def nearest_neighbor(self, key, num):
        """Finds the given number of nearest neighbor for a given embedding record.

        Args: 
            self: A reference to the current instance of the class.
            key: The embedding index for retrieval.
            num: The number of nearest neighbors.

        Returns:
            A num size list of embedding vectors that are closest to the provided vector embedding.
        """
        req = embedding_store_pb2.NearestNeighborRequest(key=key, num=num)
        return self._stub.NearestNeighbor(req).keys


    def _embedding_dict_iter(self, embedding_dict):
        """Iterates over a list of embeddings and initalizes an embedding record.

        Generates a new embedding record for each embedding vector in the list.

        Args: 
            self: A reference to the current instance of the class.
            embedding_dict: A list of embeddings.

        """
        for key, embedding in embedding_dict.items():
            req = embedding_store_pb2.MultiSetRequest()
            req.key = key
            req.embedding.values[:] = embedding
            yield req
